CMAKE_MINIMUM_REQUIRED(VERSION 3.7.0)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/cmake" CACHE STRING "Modules for CMake" FORCE)

PROJECT(libxslt C)

SET(LIBXSLT_VERSION_MAJOR 1)
SET(LIBXSLT_VERSION_MINOR 1)
SET(LIBXSLT_VERSION_MICRO 32)
SET(LIBXSLT_VERSION ${LIBXSLT_VERSION_MAJOR}.${LIBXSLT_VERSION_MINOR}.${LIBXSLT_VERSION_MICRO})

SET(LIBEXSLT_VERSION_MAJOR 0)
SET(LIBEXSLT_VERSION_MINOR 8)
SET(LIBEXSLT_VERSION_MICRO 20)
SET(LIBEXSLT_VERSION ${LIBEXSLT_VERSION_MAJOR}.${LIBEXSLT_VERSION_MINOR}.${LIBEXSLT_VERSION_MICRO})

INCLUDE(GNUInstallDirs)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckSymbolExists)
INCLUDE(CheckTypeSize)

# Macros & Functions
MACRO(bool_to_int OUT IN)
  IF(${IN})
    SET(${OUT} 1)
  ELSE()
    SET(${OUT} 0)
  ENDIF()
ENDMACRO()

# Check if _GNU_SOURCE is available.
IF(NOT _GNU_SOURCE)
  CHECK_SYMBOL_EXISTS(__GNU_LIBRARY__ "features.h" _GNU_SOURCE)

  IF(NOT _GNU_SOURCE)
    UNSET(_GNU_SOURCE CACHE)
    CHECK_SYMBOL_EXISTS(_GNU_SOURCE "features.h" _GNU_SOURCE)
  ENDIF(NOT _GNU_SOURCE)
ENDIF()
SET(__EXTENSIONS__ ${_GNU_SOURCE})
SET(_ALL_SOURCE ${_GNU_SOURCE})
SET(_POSIX_PTHREAD_SEMANTICS ${_GNU_SOURCE})
SET(_TANDEM_SOURCE ${_GNU_SOURCE})

IF(_GNU_SOURCE)
  ADD_DEFINITIONS(-D_GNU_SOURCE)
ENDIF()

# Checks
CHECK_INCLUDE_FILES("ansidecl.h" HAVE_ANSIDECL_H)
CHECK_INCLUDE_FILES("dlfcn.h" HAVE_DLFCN_H)
CHECK_INCLUDE_FILES("errno.h" HAVE_ERRNO_H)
CHECK_INCLUDE_FILES("float.h" HAVE_FLOAT_H)
CHECK_INCLUDE_FILES("fp_class.h" HAVE_FP_CLASS_H)
CHECK_INCLUDE_FILES("ieeefp.h" HAVE_IEEEFP_H)
CHECK_INCLUDE_FILES("inttypes.h" HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES("locale.h" HAVE_LOCALE_H)
CHECK_INCLUDE_FILES("math.h" HAVE_MATH_H)
CHECK_INCLUDE_FILES("memory.h" HAVE_MEMORY_H)
CHECK_INCLUDE_FILES("nan.h" HAVE_NAN_H)
CHECK_INCLUDE_FILES("pthread.h" HAVE_PTHREAD_H)
CHECK_INCLUDE_FILES("stdarg.h" HAVE_STDARG_H)
CHECK_INCLUDE_FILES("stdint.h" HAVE_STDINT_H)
CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
CHECK_INCLUDE_FILES("string.h" HAVE_STRING_H)
CHECK_INCLUDE_FILES("strings.h" HAVE_STRINGS_H)
CHECK_INCLUDE_FILES("sys/select.h" HAVE_SYS_SELECT_H)
CHECK_INCLUDE_FILES("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES("sys/time.h" HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES("sys/timeb.h" HAVE_SYS_TIMEB_H)
CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES("time.h" HAVE_TIME_H)
CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)
CHECK_INCLUDE_FILES("xlocale.h" HAVE_XLOCALE_H)

CHECK_SYMBOL_EXISTS(clock_gettime "time.h" HAVE_CLOCK_GETTIME)
CHECK_SYMBOL_EXISTS(fprintf "stdio.h" HAVE_FPRINTF)
CHECK_SYMBOL_EXISTS(ftime "sys/timeb.h" HAVE_FTIME)
CHECK_SYMBOL_EXISTS(gettimeofday "sys/time.h" HAVE_GETTIMEOFDAY)
CHECK_SYMBOL_EXISTS(gmtime "time.h" HAVE_GMTIME)
CHECK_SYMBOL_EXISTS(gmtime_r "time.h" HAVE_GMTIME_R)
CHECK_SYMBOL_EXISTS(localtime "time.h" HAVE_LOCALTIME)
CHECK_SYMBOL_EXISTS(localtime_r "time.h" HAVE_LOCALTIME_R)
CHECK_SYMBOL_EXISTS(printf "stdio.h" HAVE_PRINTF)
CHECK_SYMBOL_EXISTS(snprintf "stdio.h" HAVE_SNPRINTF)
CHECK_SYMBOL_EXISTS(sprintf "stdio.h" HAVE_SPRINTF)
CHECK_SYMBOL_EXISTS(sscanf "stdio.h" HAVE_SSCANF)
CHECK_SYMBOL_EXISTS(stat "sys/types.h;sys/stat.h" HAVE_STAT)
CHECK_SYMBOL_EXISTS(strxfrm_l "string.h;xlocale.h" HAVE_STRXFRM_L)
CHECK_SYMBOL_EXISTS(time "time.h" HAVE_TIME)
CHECK_SYMBOL_EXISTS(vfprintf "stdio.h" HAVE_VFPRINTF)
CHECK_SYMBOL_EXISTS(vsnprintf "stdio.h" HAVE_VSNPRINTF)
CHECK_SYMBOL_EXISTS(vsprintf "stdio.h" HAVE_VSPRINTF)
CHECK_SYMBOL_EXISTS(_stat "sys/types.h;sys/stat.h" HAVE__STAT)

IF(HAVE_DL_H)
  SET(CMAKE_REQUIRED_LIBRARIES "${CMAKE_DL_LIBS}")
  CHECK_SYMBOL_EXISTS(dlopen "dl.h" HAVE_DLOPEN)
  UNSET(CMAKE_REQUIRED_LIBRARIES)
ENDIF(HAVE_DL_H)

# Options
OPTION(ENABLE_CRYPTO "Add crypto support to exslt" ON)
OPTION(ENABLE_PLUGINS "Add plugin extension support" ON)
OPTION(ENABLE_DEBUG "Add the debugging code" ON)
OPTION(ENABLE_MEM_DEBUG "Add the memory debugging module" OFF)
OPTION(ENABLE_DEBUGGER "Add the debugging support" ON)

SET(ADDITIONAL_LIBS "")

find_package(Threads REQUIRED)

FIND_PACKAGE(LibGcrypt)
IF(LIBGCRYPT_FOUND)
  SET(HAVE_GCRYPT 1)
  LIST(APPEND ADDITIONAL_LIBS ${LIBGCRYPT_LIBRARIES})
ELSE(LIBGCRYPT_FOUND)
  SET(HAVE_GCRYPT 0)
ENDIF(LIBGCRYPT_FOUND)

FIND_PACKAGE(LibXml2 REQUIRED)
include_directories("${LIBXML2_INCLUDE_DIR}")
add_definitions(${LIBXML2_DEFINITIONS})
LIST(APPEND ADDITIONAL_LIBS ${LIBXML2_LIBRARIES})

#
# Find m
#
TRY_COMPILE(NEED_M "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/use_pow.c" LINK_LIBRARIES m)
IF(NEED_M)
  LIST(APPEND ADDITIONAL_LIBS m)
  SET(CMAKE_REQUIRED_LIBRARIES m)
ENDIF(NEED_M)
CHECK_SYMBOL_EXISTS(fabs "math.h" HAVE_FABS)
CHECK_SYMBOL_EXISTS(floor "math.h" HAVE_FLOOR)
CHECK_SYMBOL_EXISTS(pow "math.h" HAVE_POW)
IF(NEED_M)
  UNSET(CMAKE_REQUIRED_LIBRARIES)
ENDIF(NEED_M)

# Hacky
SET(STDC_HEADERS 1)

# Hard dependencies on options
IF(NOT HAVE_DLOPEN)
  SET(ENABLE_PLUGINS OFF)
  SET(ENABLE_MODULES OFF)
ENDIF(NOT HAVE_DLOPEN)

IF(CMAKE_USE_PTHREADS_INIT)
  SET(HAVE_LIBPTHREAD 1)
ENDIF(CMAKE_USE_PTHREADS_INIT)

# Definitions
IF(Threads_FOUND)
  ADD_DEFINITIONS(-D_REENTRANT)
ENDIF(Threads_FOUND)

# Macros & Functions
FUNCTION(generate_config)
  MATH(EXPR LIBXSLT_VERSION_MAJOR_STR "${LIBXSLT_VERSION_MAJOR} * 100")
  MATH(EXPR LIBXSLT_VERSION_MINOR_STR "${LIBXSLT_VERSION_MINOR} * 10")
  MATH(EXPR LIBXSLT_VERSION_MICRO_STR "${LIBXSLT_VERSION_MICRO} * 1")
  SET(LT_OBJDIR "\".libs/\"")
  SET(PACKAGE "\"${PROJECT_NAME}\"")
  SET(PACKAGE_BUGREPORT "\"\"")
  SET(PACKAGE_NAME "\"${PROJECT_NAME}\"")
  SET(PACKAGE_STRING "\"${PROJECT_NAME} ${LIBXSLT_VERSION}\"")
  SET(PACKAGE_TARNAME "\"${PROJECT_NAME}\"")
  SET(PACKAGE_URL "\"\"")
  SET(PACKAGE_VERSION "\"${LIBXSLT_VERSION}\"")
  SET(VERSION "\"${LIBXSLT_VERSION}\"")
  SET(LIBXSLT_VERSION_NUMBER "${LIBXSLT_VERSION_MAJOR_STR}${LIBXSLT_VERSION_MINOR_STR}${LIBXSLT_VERSION_MICRO_STR}")

  MATH(EXPR LIBEXSLT_VERSION_MAJOR_STR "${LIBEXSLT_VERSION_MAJOR} * 100")
  IF(LIBEXSLT_VERSION_MAJOR_STR STREQUAL "0")
    SET(LIBEXSLT_VERSION_MAJOR_STR "")
  ENDIF(LIBEXSLT_VERSION_MAJOR_STR STREQUAL "0")
  MATH(EXPR LIBEXSLT_VERSION_MINOR_STR "${LIBEXSLT_VERSION_MINOR} * 10")
  MATH(EXPR LIBEXSLT_VERSION_MICRO_STR "${LIBEXSLT_VERSION_MICRO} * 1")
  SET(LIBEXSLT_VERSION ${LIBEXSLT_VERSION})
  SET(LIBEXSLT_VERSION_NUMBER "${LIBEXSLT_VERSION_MAJOR_STR}${LIBEXSLT_VERSION_MINOR_STR}${LIBEXSLT_VERSION_MICRO_STR}")
  bool_to_int(WITH_TRIO 0)
  bool_to_int(WITH_MODULES ENABLE_MODULE)
  bool_to_int(WITH_XSLT_DEBUG ENABLE_DEBUG)
  bool_to_int(WITH_MEM_DEBUG ENABLE_MEM_DEBUG)
  bool_to_int(WITH_DEBUGGER ENABLE_DEBUGGER)
  bool_to_int(WITH_CRYPTO ENABLE_CRYPTO)
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/config.h")
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libxslt/xsltconfig.h.in" "${CMAKE_CURRENT_BINARY_DIR}/libxslt/xsltconfig.h")
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libxslt/xsltwin32config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/libxslt/xsltwin32config.h")
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libexslt/exsltconfig.h.in" "${CMAKE_CURRENT_BINARY_DIR}/libexslt/exsltconfig.h")
ENDFUNCTION(generate_config)

FUNCTION(generate_pkgconfig)
  SET(XSLT_INCLUDEDIR "-I\${includedir}")
  SET(EXSLT_INCLUDEDIR "-I\${includedir}")
  SET(THREAD_LIBS "${CMAKE_THREAD_LIBS_INIT}")
  SET(VERSION "${LIBXSLT_VERSION}")
  SET(LIBEXSLT_VERSION "${LIBEXSLT_VERSION}")
  SET(prefix "${CMAKE_INSTALL_PREFIX}")
  SET(exec_prefix "\${prefix}")
  SET(libdir "\${exec_prefix}/lib")
  SET(includedir "\${prefix}/include")

  # Rework LIBS
  SET(LIBS ${ADDITIONAL_LIBS})
  LIST(APPEND ADDITIONAL_LIBS ${CMAKE_DL_LIBS})
  SET(_LIBS ${LIBS})
  SET(LIBS "")
  FOREACH(V ${_LIBS})
    STRING(FIND "${V}" "$-l" out)
    IF("${out}" EQUAL 0)
      LIST(APPEND LIBS "${V}")
    ELSE()
      LIST(APPEND LIBS "-l${V}")
    ENDIF()
  ENDFOREACH()
  STRING(REPLACE ";" " " LIBS "${LIBS}")
  SET(XSLT_LIBDIR "-L\${libdir}")
  SET(XSLT_LIBS "-lxslt ${LIBS}")
  SET(EXSLT_LIBDIR "-L\${libdir}")
  SET(EXSLT_LIBS "-lexslt -lxslt ${LIBS}")

  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libxslt.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/libxslt.pc" @ONLY)
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libexslt.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/libexslt.pc" @ONLY)
ENDFUNCTION()

generate_config()
generate_pkgconfig()

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/libxslt")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/libexslt")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

SET(XSLT_HEADER_FILES
    "libxslt/attributes.h"
    "libxslt/documents.h"
    "libxslt/extensions.h"
    "libxslt/extra.h"
    "libxslt/functions.h"
    "libxslt/imports.h"
    "libxslt/keys.h"
    "libxslt/namespaces.h"
    "libxslt/numbersInternals.h"
    "libxslt/pattern.h"
    "libxslt/preproc.h"
    "libxslt/security.h"
    "libxslt/templates.h"
    "libxslt/transform.h"
    "libxslt/triodef.h"
    "libxslt/trio.h"
    "libxslt/variables.h"
    "libxslt/xsltexports.h"
    "libxslt/xslt.h"
    "libxslt/xsltInternals.h"
    "libxslt/xsltlocale.h"
    "libxslt/xsltutils.h"
)

SET(XSLT_SOURCE_FILES
    "libxslt/attributes.c"
    "libxslt/attrvt.c"
    "libxslt/documents.c"
    "libxslt/extensions.c"
    "libxslt/extra.c"
    "libxslt/functions.c"
    "libxslt/imports.c"
    "libxslt/keys.c"
    "libxslt/namespaces.c"
    "libxslt/numbers.c"
    "libxslt/pattern.c"
    "libxslt/preproc.c"
    "libxslt/security.c"
    "libxslt/templates.c"
    "libxslt/transform.c"
    "libxslt/variables.c"
    "libxslt/xslt.c"
    "libxslt/xslt.h"
    "libxslt/xsltlocale.c"
    "libxslt/xsltutils.c"
)

SET(EXSLT_HEADER_FILES
    "libexslt/exsltexports.h"
    "libexslt/exslt.h"
)

SET(EXSLT_SOURCE_FILES
    "libexslt/common.c"
    "libexslt/crypto.c"
    "libexslt/date.c"
    "libexslt/dynamic.c"
    "libexslt/exslt.c"
    "libexslt/functions.c"
    "libexslt/libexslt.3"
    "libexslt/math.c"
    "libexslt/saxon.c"
    "libexslt/sets.c"
    "libexslt/strings.c"
)

ADD_LIBRARY(xslt "${XSLT_HEADER_FILES}" "${XSLT_SOURCE_FILES}")
SET_TARGET_PROPERTIES(xslt PROPERTIES PREFIX "lib")
SET_TARGET_PROPERTIES(xslt PROPERTIES IMPORT_PREFIX "lib")
TARGET_LINK_LIBRARIES(xslt ${CMAKE_DL_LIBS} ${ADDITIONAL_LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET_TARGET_PROPERTIES(xslt PROPERTIES SOVERSION ${LIBXSLT_VERSION_MAJOR})
SET_TARGET_PROPERTIES(xslt PROPERTIES VERSION ${LIBXSLT_VERSION})

ADD_LIBRARY(exslt "${EXSLT_HEADER_FILES}" "${EXSLT_SOURCE_FILES}")
SET_TARGET_PROPERTIES(exslt PROPERTIES PREFIX "lib")
SET_TARGET_PROPERTIES(exslt PROPERTIES IMPORT_PREFIX "lib")
TARGET_LINK_LIBRARIES(exslt xslt ${CMAKE_DL_LIBS} ${ADDITIONAL_LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET_TARGET_PROPERTIES(exslt PROPERTIES SOVERSION ${LIBEXSLT_VERSION_MAJOR})
SET_TARGET_PROPERTIES(exslt PROPERTIES VERSION ${LIBEXSLT_VERSION})

ADD_EXECUTABLE(xsltproc "xsltproc/xsltproc.c")
TARGET_LINK_LIBRARIES(xsltproc xslt exslt)

#------------------------------------------------------------------------------

INSTALL(FILES ${XSLT_HEADER_FILES} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/libxslt")
INSTALL(FILES ${EXSLT_HEADER_FILES} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/libexslt")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libxslt/xsltconfig.h" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/libxslt")
IF(WIN32)
  INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libxslt/xsltwin32config.h" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/libxslt")
ENDIF(WIN32)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libexslt/exsltconfig.h" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/libexslt")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libxslt.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libexslt.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")

INSTALL(TARGETS xslt exslt xsltproc
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
)
